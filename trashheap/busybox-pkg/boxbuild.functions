#!/usr/bin/env sh
# funtions for spkgmake

disable_colors() {
        NORMAL=""
        STRONG=""
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
}

enable_colors() {
        NORMAL="\033[1;0m"
        STRONG="\033[1;1m"
        RED="\033[1;31m"
        GREEN="\033[1;32m"
        YELLOW="\033[1;33m"
        BLUE="\033[1;34m"
}

if [ "$USE_COLORS" = yes ]; then
        enable_colors
elif [ -n "$USE_COLORS" ] && [ -t 1 ]; then
        enable_colors
else
        disable_colors
fi

msg() {
        local prompt="$GREEN>>>${NORMAL}"
        printf "${prompt} %s\n" "$1" >&2
}

warning() {
        local prompt="${YELLOW}>>> WARNING:${NORMAL}"
        printf "${prompt} %s\n" "$1" >&2
}

error() {
        local prompt="${RED}>>> ERROR:${NORMAL}"
        printf "${prompt} %s\n" "$1" >&2
}

die() {
	error "$@"
	exit 1
}

variablecheck() {
        msg "pkgname=$pkgname"
        msg "pkgver=$pkgver"
        msg "pkgrel=$pkgrel"
        msg "epoch=$epoch"
	msg "maintainer=$maintainer"
        msg "pkgdesc=$pkgdesc"
        msg "arch=$arch"
        msg "url=$url"
        msg "license=$license"
        msg "section=$section"
	msg "subpackages=$subpackages"
        msg "depends=$depends"
        msg "makedepends=$makedepends"
        msg "checkdepends=$checkdepends"
        msg "optdepends=$optdepends"
        msg "conflicts=$conflicts"
        msg "replaces=$replaces"
        msg "provides=$provides"
        msg "backup=$backup"
        msg "options=$options"
        msg "install=$install"
        msg "source=$source"
        msg "md5sums=$md5sums"
        msg "sha256sums=$sha256sums"
        msg "triggers=$triggers"
}

check_remote() {
	case "${1#*::}" in
	http://*|ftp://*|https://*)
	return 0;;
	esac
	return 1
}

filename_from_uri() {
        local uri="$1"
        local filename="${uri##*/}"  # $(basename $uri)
        case "$uri" in
        *::*) filename=${uri%%::*};;
        esac
        echo "$filename"
}

checksources() {
        local uri
	msg "Checking: filenames"
        for uri in $source; do
        check_remote $uri || continue
        case "$uri" in
        *::*)
        uri=${uri##*::}
        ;;
        esac
	files="${uri##*/}"
       	echo $files
        done
        return 0
}

sourcecheck() {
	local uri
	for uri in $source; do
	check_remote $uri || continue
	case "$uri" in
	*::*)
	uri=${uri##*::}
	;;
	esac
	msg "Checking URL: $uri"
	wget -q --spider "$uri" || die "Broken url: $uri"
	echo "${uri##*/}"
	done
	return 0
}

unpack() {
	local u
	mkdir -p "$SRC"
	for u in $source; do
	local s
	if check_remote "$u"; then
	s="$SRC/$(filename_from_uri $u)"
	else
	s="$SRC/$u"
	fi
	case "$s" in
	*.tar)
	msg "Unpacking $s..."
	tar -C "$SRC" -xf "$s" || return 1;;
	*.tar.gz|*.tgz)
	msg "Unpacking $s..."
	$gunzip -c "$s" | tar -C "$SRC" -x || return 1;;
	*.tar.bz2)
	msg "Unpacking $s..."
	tar -C "$SRC" -jxf "$s" || return 1;;
	*.tar.lz)
	msg "Unpacking $s..."
	tar -C "$SRC" --lzip -xf "$s" || return 1;;
	*.tar.lzma)
	msg "Unpacking $s..."
	unlzma -T 0 -c "$s" | tar -C "$SRC" -x || return 1;;
	*.tar.xz)
	msg "Unpacking $s..."
	local threads_opt
	if [ $(readlink -f $(command -v unxz)) != "/bin/busybox" ]; then
	threads_opt="--threads=0"
	fi
	unxz $threads_opt -c "$s" | tar -C "$SRC" -x || return 1;;
	*.zip)
	msg "Unpacking $s..."
	unzip -n -q "$s" -d "$SRC" || return 1;;
	esac
	done
}
